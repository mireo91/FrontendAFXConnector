<?php
namespace Mireo\FrontendAFXConnector\FusionObjects;

use Neos\Fusion\FusionObjects\ComponentImplementation;
use Neos\Utility\Files;


class AfxConnectorImplementation extends ComponentImplementation
{

    public function evaluate()
    {
//        $this->afxCode();
        return parent::evaluate(); // TODO: Change the autogenerated stub
    }

    protected function render($context)
    {
        $context['props']['availableProps'] = $this->propsToUse();
        $context['props']['afxCode'] = $this->getFusionCode();
//        $context['props']['afxCode'] = $this->getFusionCode();
//        \Neos\Flow\var_dump($context);exit;
//        $contextParent = $this->runtime->getCurrentContext();

//        if( isset($contextParent['props']) ){
//            $context['props'] = $contextParent['props'];
//        }

        return parent::render($context); // TODO: Change the autogenerated stub
    }


    protected function propsToUse(){
        $context = $this->runtime->getCurrentContext();
        $propsToUse = [];
        if(isset($context['props'])){
            foreach($context['props'] as $key=>$val){
                $propsToUse[] = "props.$key";
            }
            unset($context['props']);
        }
        $propsToUse = array_merge($propsToUse, array_keys($context));
        return $propsToUse;
    }

    protected function getFusionCode(){
//        $this->getRuntime()->setEnableContentCache(false);
        $request = $this->getRuntime()->getControllerContext()->getRequest();
        $code = null;
//        $httpRequest->getAttributes()
//        $arguments = $httpRequest->getQueryParams();
//        \Neos\Flow\var_dump($parsedBody);exit;
        $path = $this->fusionValue('path');
        if( $request->hasArgument('fusionCode') ){
            $fusionCode = $request->getArgument('fusionCode');
            if( isset($fusionCode[$path]) ){
                $code = $fusionCode[$path];
            }
//            \Neos\Flow\var_dump($this->path);exit;
//            \Neos\Flow\var_dump($fusionCode);exit;
//            $code = $fusionCode;
//            if( isset($fusionCode[$this->path] ){
//                $code = $fusionCode[$this->path];
//            }
        }
//        \Neos\Flow\var_dump($code);exit;
        if(!$code){
            if( !file_exists($path) )
                return;

            $code = Files::getFileContents($path);
        }

        return $code;
    }

}
