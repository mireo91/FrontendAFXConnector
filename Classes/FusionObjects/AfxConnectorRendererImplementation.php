<?php
namespace Mireo\FrontendAFXConnector\FusionObjects;

use Neos\Fusion\Afx\Parser\Expression\Prop;
use Neos\Fusion\Afx\Service\AfxService;
use Neos\Fusion\Core\Parser;
use Neos\Fusion\Core\RuntimeConfiguration;
use Neos\Fusion\FusionObjects\AbstractFusionObject;
use Neos\Fusion\FusionObjects\ComponentImplementation;
use Neos\Utility\Arrays;
use Neos\Utility\Files;
use Neos\Utility\ObjectAccess;


class AfxConnectorRendererImplementation extends AbstractFusionObject
{

    public function evaluate()
    {
        return $this->afxCode();
//        $this->afxCode();
//        return parent::evaluate(); // TODO: Change the autogenerated stub
    }

//    protected function render($context)
//    {
//        $context['props']['availableProps'] = $this->propsToUse();
//        return parent::render($context); // TODO: Change the autogenerated stub
//    }

    /**
     * Evaluate the fusion-keys and transfer the result into the context as ``props``
     * afterwards evaluate the ``renderer`` with this context
     *
     * @return mixed
     */
    protected function afxCode()
    {
        $code = $this->fusionValue('afxCode');
        $fusion = AfxService::convertAfxToFusion($code);
        $parser = new Parser();

        $temporaryAst = $parser->parse('value = '. $fusion);
        $processedValue = $temporaryAst['value'];
        $context = $this->runtime->getCurrentContext();
//        \Neos\Flow\var_dump(array_keys($context['props']));exit;
//        if( $this->getRuntime()->getControllerContext()->getRequest()->hasArgument('fusionCode') ) {
//        $processedValue['__meta']['cache'] = [
//            'mode' => 'dynamic',
//            'entryDiscriminator' => '${request.arguments.fusionCode?false:true}',
//            'context' => [
//                'node',
//                'documentNode',
//                'site',
////                'request',
////                'props'
//            ]
//        ];
//        $processedValue['__meta']['cache']['context'] = ;
//        }


        $runtimeConfiguration = ObjectAccess::getProperty($this->runtime, 'runtimeConfiguration', true);
        $fusionConfiguration = ObjectAccess::getProperty($runtimeConfiguration, 'fusionConfiguration', true);
        $cachePath = "$this->path/afxCode";
//        \Neos\Flow\var_dump($cachePath);
        $pathArray = preg_replace('/\<.*?\>\/|\//', '.', $cachePath);
//        \Neos\Flow\var_dump($pathArray);exit;
        $fusionConfiguration = Arrays::setValueByPath($fusionConfiguration, $pathArray, $processedValue);
        $fusionConfiguration[$cachePath] = $processedValue;
//\Neos\Flow\var_dump($cachePath);
        ObjectAccess::setProperty($this->runtime, 'runtimeConfiguration', new RuntimeConfiguration($fusionConfiguration), true);

//        \Neos\Flow\var_dump(array_keys($context['props']));exit;

        $this->runtime->pushContext('props', $context['parentProps']??[]);
        $result =  $this->runtime->render($cachePath);
        $this->runtime->popContext();
        return $result;
    }

//    protected function getFusionCode(){
//        $httpRequest = $this->getRuntime()->getControllerContext()->getRequest()->getHttpRequest();
//        $code = null;
////        $httpRequest->getAttributes()
//        $arguments = $httpRequest->getQueryParams();
////        \Neos\Flow\var_dump($parsedBody);exit;
//        if( isset($arguments['fusionCode']) ){
//            $fusionCode = $arguments['fusionCode'];
//            $code = $fusionCode;
////            if( isset($fusionCode[$this->path] ){
////                $code = $fusionCode[$this->path];
////            }
//        }
////        \Neos\Flow\var_dump($code);exit;
//        if(!$code){
//            $path = $this->fusionValue('path');
//            if( !file_exists($path) )
//                return;
//
//            $code = Files::getFileContents($path);
//        }
//
//        return $code;
//    }

}
